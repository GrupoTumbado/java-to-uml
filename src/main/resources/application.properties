### APP VERSION ###
app.version=1.0.0
app.name=Java2UML API

### MVC SETTINGS ###
spring.mvc.throw-exception-if-no-handler-found=true

### Logging Settings ###
logging.file.name=./log/java2uml.log
logging.charset.file=utf-8
logging.level.root=info
logging.logback.rollingpolicy.file-name-pattern=./log/archived/java2uml-%d{yyyy-MM-dd}.%i.log
logging.logback.rollingpolicy.max-file-size=10MB
logging.logback.rollingpolicy.total-size-cap=200MB
logging.logback.rollingpolicy.max-history=7

### In Memory H2 DB Settings ###
# For in memory
spring.datasource.url=jdbc:h2:mem:testDB
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# spring.jpa.open-in-view increases the length of your JPA session or as the documentation says,
# it is used "to allow for lazy loading in web views despite the original transactions already being completed."
# so this way the JPA session will be open a bit longer and because of that you can lazily load collections
# in your controller classes.
# By default it is true.
spring.jpa.open-in-view=true
# Properties for ddl generation
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata

### Multipart File Upload ###
spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=2KB
spring.servlet.multipart.max-file-size=500MB
spring.servlet.multipart.max-request-size=500MB

### File Storage Properties ###
file.upload-dir=./tmp/uploads
file.uml-dir=./tmp/uml
file.unzip-dir=./tmp/unzipped

### SENTRY SUPPORT ###
sentry.dsn=https://c5b56effdaef43f299a90853eec286f2@o87727.ingest.sentry.io/5687575